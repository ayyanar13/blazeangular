{"ast":null,"code":"import { Observable } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-pipes\";\nexport let MapService = /*#__PURE__*/(() => {\n  class MapService {\n    constructor(camelizePipe) {\n      this.camelizePipe = camelizePipe;\n      this.locationcache = {};\n    }\n\n    caramaize(value) {\n      return this.camelizePipe.transform(value);\n    }\n\n    cachelocation(location, coordinates) {\n      return this.locationcache[this.caramaize(location)] = coordinates;\n    }\n\n    islocationcached(location) {\n      return this.locationcache[this.caramaize(location)];\n    }\n\n    getlocation(location) {\n      return new Observable(observer => {\n        this.geocoder.geocode({\n          address: location\n        }, (result, status) => {\n          if (status) {\n            const gemetory = result[0].geometry.location;\n            const coordinate = {\n              lat: gemetory.lat(),\n              lng: gemetory.lng()\n            };\n            this.cachelocation(location, coordinate);\n            observer.next(coordinate);\n          } else {\n            observer.next(\"cannot get location\");\n          }\n        });\n      });\n    }\n\n    getgeocode(location) {\n      this.geocoder = new window.google.maps.Geocoder();\n      return new Observable(observer => {\n        console.log(this.islocationcached(location));\n\n        if (this.islocationcached(location)) {\n          observer.next(this.locationcache[this.caramaize(location)]);\n        } else {\n          this.getlocation(location);\n        }\n      });\n    }\n\n  }\n\n  MapService.ɵfac = function MapService_Factory(t) {\n    return new (t || MapService)(i0.ɵɵinject(i1.CamelizePipe));\n  };\n\n  MapService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MapService,\n    factory: MapService.ɵfac\n  });\n  return MapService;\n})();","map":null,"metadata":{},"sourceType":"module"}